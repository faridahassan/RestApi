<?php

namespace BackendBundle\DAO;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getTopEnterpreneursAllTime($limit , $page )
    {   
        $query = $this->createQueryBuilder('u')
                        ->select('u')
                        ->Join('u.pointshistory', 'm')
                        ->groupBy('u.id')
                        ->orderBy('u.points', 'DESC')
                        ->setFirstResult($limit * ($page - 1)) // Offset
                        ->setMaxResults($limit);
         
        return $query->getQuery()->getResult();
   }
    public function getTopEnterpreneursTimeRange($limit , $page )
    {   

        $monthdays =$this->getStartAndEndDateMonth(date("m") , date("y"));
        $query = $this->createQueryBuilder('u')
        ->select('u')
        ->Join('u.pointshistory', 'm')
        ->Where( 'm.created > :start' )
        ->andWhere( 'm.created < :end' )
        ->orWhere( 'm.created = :start' )
        ->orWhere( 'm.created = :end' )
        ->groupBy('u.id')
        ->orderBy('u.points', 'DESC')
        ->setParameter('start', $monthdays[0])
        ->setParameter('end', $monthdays[1])
        ->setFirstResult($limit * ($page - 1)) // Offset
        ->setMaxResults($limit)        
        ;

        return $query->getQuery()->getResult();
   }
    public function getTopEnterpreneursIndustry($limit , $page , $industry  )
    {   

        $monthdays =$this->getStartAndEndDateMonth(date("m") , date("y"));
        $query = $this->createQueryBuilder('u')
        ->select('u')
        ->Join('u.pointshistory', 'm')
        ->Where( 'm.created > :start' )
        ->andWhere( 'm.created < :end' )
        ->andWhere( 'u.industry = :industry' )
        ->orWhere( 'm.created = :start' )
        ->orWhere( 'm.created = :end' )
        ->groupBy('u.id')
        ->orderBy('u.points', 'DESC')
        ->setParameter('start', $monthdays[0])
        ->setParameter('end', $monthdays[1])
        ->setParameter('industry', $industry)
        ->setFirstResult($limit * ($page - 1)) // Offset
        ->setMaxResults($limit)        
        ;

        return $query->getQuery()->getResult();

    }
     public function getTopEnterpreneursCountry($limit , $page , $country )
    {   

        $monthdays =$this->getStartAndEndDateMonth(date("m") , date("y"));
        $query = $this->createQueryBuilder('u')
        ->select('u')
        ->Join('u.pointshistory', 'm')
        ->Where( 'm.created > :start' )
        ->andWhere( 'u.country = :country' )
        ->andWhere( 'm.created < :end' )
        ->orWhere( 'm.created = :start' )
        ->orWhere( 'm.created = :end' )
        ->groupBy('u.id')
        ->orderBy('u.points', 'DESC')
        ->setParameter('start', $monthdays[0])
        ->setParameter('end', $monthdays[1])
        ->setParameter('country', $country)
        ->setFirstResult($limit * ($page - 1)) // Offset
        ->setMaxResults($limit)        
        ;
        return $query->getQuery()->getResult();

    }
    public  function getStartAndEndDateMonth($month, $year)
    { 
        $time = strtotime($year."-".$month."-01 00:00:00" , time());
        $return[0]=date('Y-n-j H:i:s' ,$time);
        $return[1]= date("Y-m-t H:i:s", strtotime($return[0]));
        return $return;
    }

    public function getHelpedMe($user)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT r as reply ,  u as user 
            from BackendBundle:Reply as r
            join r.user u 
            join r.post p
            where p.user = :user
            group by u
            '
            )
        ->setParameter('user', $user);
        return ($query->getResult());
   }

   public function getIHelped($user)
   {
        $query = $this->getEntityManager()->createQuery(
            'SELECT r as reply ,  p,owners
            from BackendBundle:Reply as r
            join r.user u 
            join r.post p
            join p.user owners
            where r.user = :user
            group by owners
            ')
        ->setParameter('user', $user);
        return ($query->getResult());
   }
    public function getTeamSize($user)
   {
        $team = [];

        // get people I helped
        $query = $this->getEntityManager()->createQuery(
            'SELECT  owners.id 
            from BackendBundle:Reply as r
            join r.user u 
            join r.post p
            join p.user owners
            where r.user = :user
            group by owners
            ')
        ->setParameter('user', $user);
        $users = ($query->getResult());
        $team = array_merge($team,$users);

        // get people that helped Me
        $query = $this->getEntityManager()->createQuery(
            'SELECT  u.id  
            from BackendBundle:Reply as r
            join r.user u 
            join r.post p
            where p.user = :user
            group by u
            '
            )
        ->setParameter('user', $user);
        $users =  $query->getResult();

        // find unique users
        $team = array_merge($team,$users);
        $unique = [];
        foreach ($team as $user) {
            $unique[$user['id']] = $user;
        }


        return (count($unique));
   }

}
